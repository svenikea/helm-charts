{{ if .Values.externalSecret.enabled }}
---
apiVersion: external-secrets.io/v1
kind: SecretStore
metadata:
  name: {{ .Values.deployment.name }}-secret-store
spec:
  provider:
  {{ if .Values.externalSecret.onepassword.connectServer }}
    onepassword:
      connectHost: {{ .Values.externalSecret.onepassword.connectHost }}
      vaults:
        {{ .Values.externalSecret.onepassword.vaultName }}: 1
      auth:
        secretRef:
          connectTokenSecretRef:
            name: {{ .Values.externalSecret.onepassword.tokenName | default "op-credentials" }}
            key: {{ .Values.externalSecret.onepassword.tokenKey | default "token" }}
            namespace: {{ .Release.Namespace }}
  {{ end }}
  {{ if .Values.externalSecret.onepassword.sdk }}
    onepasswordSDK:
      vault: {{ .Values.externalSecret.onepassword.vaultName }}
      auth:
        serviceAccountSecretRef:
          name: {{ .Values.externalSecret.onepassword.tokenName | default "op-credentials" }}
          key: {{ .Values.externalSecret.onepassword.tokenKey | default "token" }}
      integrationInfo: # this is optional and defaulted
        name: integration-info
        version: v1
  {{ end }}
  {{ if and .Values.externalSecret.onepassword.connectServer .Values.externalSecret.onepassword.sdk }}
  {{ fail "Only one of externalSecret.onepassword.connectServer or externalSecret.onepassword.sdk can be enabled at the same time!" }}
  {{ end }}
  {{- if and .Values.externalSecret.aws.sercretManager.enabled .Values.externalSecret.aws.parameterStore.enabled }}
  {{- fail ".Values.externalSecret.aws.sercretManager.enabled or .Values.externalSecret.aws.parameterStore.enabled can be enabled at the same time!" }}
  {{- end }}
  {{- if or .Values.externalSecret.aws.sercretManager.enabled .Values.externalSecret.aws.parameterStore.enabled }}
    aws:
      {{- if .Values.externalSecret.aws.sercretManager.enabled }}
      service: SecretsManager
      {{- else if .Values.externalSecret.aws.parameterStore.enabled }}
      service: ParameterStore
      {{- end }}
      region: {{ .Values.externalSecret.aws.region | default "us-east-1" }}
      auth:
        secretRef:
          accessKeyIDSecretRef:
            name: {{ .Values.externalSecret.aws.secretName | default "awssm-secret" }}
            key: {{ .Values.externalSecret.aws.accessKeyName | default "access-key" }}
          secretAccessKeySecretRef:
            name: {{ .Values.externalSecret.aws.secretName | default "awssm-secret" }}
            key: {{ .Values.externalSecret.aws.secretAccessKeyName | default "secret-access-key" }}
  {{- end }}

{{- /*
################## Attention ###############################
# Please the the kube command like this to create the
# 1password token secret after the argo application is
# created:
# kubectl create secret generic op-credentials \
# --from-literal=token="<token-here>" -n <namespace-here>
############################################################
*/}}
---
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: {{ .Values.deployment.name }}-secret-fetcher
spec:
  refreshInterval: {{ .Values.externalSecret.refreshInterval | default "24h" }}
  secretStoreRef:
    kind: SecretStore
    name: {{ .Values.deployment.name }}-secret-store
  target:
    creationPolicy: Owner
  {{ if .Values.externalSecret.allKeyOneSecret.enabled }}
    template:
      type: Opaque
      engineVersion: v2
      templateFrom:
      - target: Data
        literal: |-
          {{`{{- $envMap := fromJson .envJson -}}`}}
          {{`{{- range $key, $val := $envMap }}`}}
          {{`{{ $key }}: {{ $val }}`}}
          {{`{{- end -}}`}}
  data:
    - secretKey: envJson
      remoteRef:
        key: {{ .Values.externalSecret.onepassword.item }}/{{ .Values.externalSecret.allKeyOneSecret.field }}
  {{ else }}
  data:
    {{- /*
    # Splits the multiline string into lines.
    # Removes whitespace
    # Ensures blank lines are skipped
    */}}
    {{ range $name := splitList "\n" .Values.externalSecret.onepassword.data }}
    {{ $trimmed := trim $name }}
    {{ if $trimmed }}
      - secretKey: {{ $trimmed }}
        remoteRef:
          key: {{ $.Values.externalSecret.onepassword.item }}/{{ $trimmed }}
    {{ end }}
    {{ end }}
    {{- /*
    # Get Specific values from 1Password
    */}}
    {{ range .Values.externalSecret.onepassword.secretLists }}
      - secretKey: {{ .name }}
        remoteRef:
          key: {{ $.Values.externalSecret.onepassword.item }}/{{ .name }}
    {{ end }}
    {{ end }}
{{ end }}

{{ if .Values.externalSecret.privateRegistry.enabled }}
---
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: {{ .Values.deployment.name }}-private-registry-secret-fetcher
spec:
  refreshInterval: {{ .Values.externalSecret.refreshInterval | default "24h" }}
  secretStoreRef:
    kind: SecretStore
    name: {{ .Values.deployment.name }}-secret-store
  target:
    creationPolicy: Owner
    template:
      type: kubernetes.io/dockerconfigjson
      data:
        .dockerconfigjson: '{"auths":{"***REMOVED***":{"username": "{{ "{{" }}.username{{ "}}" }}","password": "{{ "{{" }}.password{{ "}}" }}"}}}'
  data:
    - secretKey: username
      remoteRef:
        key: {{ $.Values.externalSecret.privateRegistry.onepasswordItem | default "Harbor Robot" }}/username
    - secretKey: password
      remoteRef:
        key: {{ $.Values.externalSecret.privateRegistry.onepasswordItem | default "Harbor Robot" }}/password
{{ end }}
{{- if or .Values.externalSecret.aws.parameterStore.enabled .Values.externalSecret.aws.sercretManager.enabled }}
---
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: {{ printf "%s-aws-secret-fetcher" .Values.deployment.name }}
spec:
  refreshInterval: {{ .Values.externalSecret.refreshInterval | default "48h" }}
  secretStoreRef:
    kind: SecretStore
    name: {{ printf "%s-secret-store" .Values.deployment.name }}
  target:
    creationPolicy: Owner
    {{- if .Values.externalSecret.aws.dataFrom.enabled }}
  dataFrom:
  - extract:
      key: {{ .Values.externalSecret.aws.dataFrom.keyPath }}
    {{- end }}
    {{- if .Values.externalSecret.aws.allKeyOneSecret.enabled }}
    template:
      type: Opaque
      engineVersion: v2
      templateFrom:
      - target: Data
        literal: |-
          {{`{{- $envMap := fromJson .envJson -}}`}}
          {{`{{- range $key, $val := $envMap }}`}}
          {{`{{ $key }}: {{ $val }}`}}
          {{`{{- end -}}`}}
  data:
    - secretKey: envJson
      remoteRef:
        key: {{ .Values.externalSecret.aws.allKeyOneSecret.keyPath }}
        version: {{ .Values.externalSecret.aws.allKeyOneSecret.version | default "AWSCURRENT" }}
    {{- end }}
    {{- if .Values.externalSecret.aws.secretList }}
  data:
  {{- range .Values.externalSecret.aws.secretList }}
    - secretKey: {{ .name }}
      remoteRef:
        key: {{ .keyPath }}
        version: {{ .version | default "AWSCURRENT" }}
  {{- end }}
  {{- end }}
{{- end }}
